Aufgabe 1.

FIFO

Access 8: Miss - [8] <-- Last
Access 7: Miss - [8, 7]
Access 4: Miss - [8, 7, 4]
Access 2: Miss - [7, 4, 2]
Access 5: Miss - [4, 2, 5]
Access 4: Hit - [4, 2, 5]
Access 7: Miss - [2, 5, 7]
Access 3: Miss - [5, 7, 3]
Access 4: Miss - [7, 3, 4]
Access 5: Miss - [3, 4, 5]

--> Hitrate: 10%

LRU

8: Miss [8]
7: Miss [8, 7]
4: Miss [8, 7, 4]
2: Miss [7, 4, 2]
5: Miss [4, 2, 5]
4: Hit [2, 5, 4]
7: Miss [5, 4, 7]
3: Miss [4, 7, 3]
4: Hit [7, 3, 4]
5; Miss [3,4,5]

--> Hitrate 20%

OPT

8: Miss [8]
7: Miss [8, 7]
4: Miss [8, 7, 4] (8 replaced)
2: Miss [7, 4, 2]
5: Miss [7, 4, 5] (2 replaced)
4: Hit
7: Hit
3: Miss [4, 5, 3] (7 Replaced)
4: Hit
5: Hit

--> Hitrate 40%



Aufgabe 2.

FIFO: 1, 2, 3, 4, 5, 6, 1, 2, 3, 4
LRU: 1, 2, 3, 4, 5, 6, 1, 2, 3, 4
MRU: 1, 2, 3, 4, 5, 6, 5, 6, 5, 6
OPT: 1, 2, 3, 4, 5, 6, 7, 8, 9 (Ich weiß .. schwachsinn :D)
OPT lässt sich nicht austricksen, weil er in die Zukunft sieht

Wenn der Cache nur um 1 vergrößert wird, haben wir eine nahezu optimale hitrate


Aufgabe 3.
Die meisten werden schlecht laufen, weil keine Lokalität vorhanden ist.


Aufgabe 4.

Mit starker Lokalität performen alle Strategien besser, vorallem Clock verhält sich hier im Durschnitt ein wenig besser.
RAND < LRU < CLOCK < 100% Hitrate

In meinem Fall verschlechtert sich die Hitrate ein wenig, wenn ich mehr CLockbits angebe


Aufgabe 5.

Komischerweise kommen viele Addressen extrem oft vor.

Meist ist der Zugriff auf eine Addresse sehr viel häufiger, und das ist meist eine sehr kleine Addresse. D.h. der Cache müsste garnicht besonders groß sein, um eine vielzahl der Addressen zu bedienen.